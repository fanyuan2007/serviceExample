// <auto-generated />
using System;
using BlastService.Private.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using NetTopologySuite.Geometries;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace BlastService.Migrations
{
    [DbContext(typeof(ProjectContext))]
    partial class ProjectContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:PostgresExtension:postgis", ",,")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("BlastService.Private.Models.ChargeIntervalDb", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("Amount")
                        .HasColumnType("double precision");

                    b.Property<string>("Consumable")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Deck")
                        .HasColumnType("text");

                    b.Property<double>("From")
                        .HasColumnType("double precision");

                    b.Property<Guid>("HoleId")
                        .HasColumnType("uuid");

                    b.Property<string>("ProfileType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("To")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("HoleId");

                    b.ToTable("ChargingIntervals");
                });

            modelBuilder.Entity("BlastService.Private.Models.FragmentationDb", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double?>("P10")
                        .HasColumnType("double precision");

                    b.Property<double?>("P20")
                        .HasColumnType("double precision");

                    b.Property<double?>("P30")
                        .HasColumnType("double precision");

                    b.Property<double?>("P40")
                        .HasColumnType("double precision");

                    b.Property<double?>("P50")
                        .HasColumnType("double precision");

                    b.Property<double?>("P60")
                        .HasColumnType("double precision");

                    b.Property<double?>("P70")
                        .HasColumnType("double precision");

                    b.Property<double?>("P80")
                        .HasColumnType("double precision");

                    b.Property<double?>("P90")
                        .HasColumnType("double precision");

                    b.Property<double?>("TopSize")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("Fragmentation");
                });

            modelBuilder.Entity("BlastService.Private.Models.HoleDb", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double?>("Accuracy")
                        .HasColumnType("double precision");

                    b.Property<double?>("ActualAzimuth")
                        .HasColumnType("double precision");

                    b.Property<double?>("ActualChargeThickness")
                        .HasColumnType("double precision");

                    b.Property<double?>("ActualChargeWeight")
                        .HasColumnType("double precision");

                    b.Property<Point>("ActualCollar")
                        .HasColumnType("geography");

                    b.Property<double?>("ActualDip")
                        .HasColumnType("double precision");

                    b.Property<Guid?>("ActualFragmentId")
                        .HasColumnType("uuid");

                    b.Property<double?>("ActualLength")
                        .HasColumnType("double precision");

                    b.Property<Point>("ActualToe")
                        .HasColumnType("geography");

                    b.Property<LineString>("ActualTrace")
                        .HasColumnType("geography");

                    b.Property<double>("AreaOfInfluence")
                        .HasColumnType("double precision");

                    b.Property<Guid?>("BlastPatternId")
                        .HasColumnType("uuid");

                    b.Property<string>("ChargeTemplateName")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double>("DesignAzimuth")
                        .HasColumnType("double precision");

                    b.Property<double?>("DesignBenchCollar")
                        .HasColumnType("double precision");

                    b.Property<double?>("DesignBenchToe")
                        .HasColumnType("double precision");

                    b.Property<double?>("DesignChargeThickness")
                        .HasColumnType("double precision");

                    b.Property<double?>("DesignChargeWeight")
                        .HasColumnType("double precision");

                    b.Property<Point>("DesignCollar")
                        .IsRequired()
                        .HasColumnType("geography");

                    b.Property<double>("DesignDiameter")
                        .HasColumnType("double precision");

                    b.Property<double>("DesignDip")
                        .HasColumnType("double precision");

                    b.Property<double>("DesignLength")
                        .HasColumnType("double precision");

                    b.Property<double>("DesignSubDrill")
                        .HasColumnType("double precision");

                    b.Property<Point>("DesignToe")
                        .IsRequired()
                        .HasColumnType("geography");

                    b.Property<LineString>("DesignTrace")
                        .HasColumnType("geography");

                    b.Property<Guid>("DrillPatternId")
                        .HasColumnType("uuid");

                    b.Property<double?>("FragmentSize")
                        .HasColumnType("double precision");

                    b.Property<string>("GeologyCode")
                        .HasColumnType("text");

                    b.Property<string>("HoleState")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HoleUsage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LayoutType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double?>("LengthAccuracy")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double?>("PowderFactor")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ValidationState")
                        .HasColumnType("integer");

                    b.Property<double>("VolumeOfInfluence")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("ActualFragmentId");

                    b.HasIndex("BlastPatternId");

                    b.HasIndex("DrillPatternId");

                    b.ToTable("Holes");
                });

            modelBuilder.Entity("BlastService.Private.Models.PatternDb", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<MultiLineString>("ActualBoundary")
                        .HasColumnType("geography");

                    b.Property<Guid?>("ActualFragmentId")
                        .HasColumnType("uuid");

                    b.Property<double?>("Area")
                        .HasColumnType("double precision");

                    b.Property<double?>("AverageHoleLength")
                        .HasColumnType("double precision");

                    b.Property<string>("Bench")
                        .HasColumnType("text");

                    b.Property<string>("ChargingTemplateName")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<MultiLineString>("DesignBoundary")
                        .IsRequired()
                        .HasColumnType("geography");

                    b.Property<Guid?>("DesignFragmentId")
                        .HasColumnType("uuid");

                    b.Property<double>("FaceAngle")
                        .HasColumnType("double precision");

                    b.Property<string>("GeologyCode")
                        .HasColumnType("text");

                    b.Property<string>("HoleUsage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsElectronic")
                        .HasColumnType("boolean");

                    b.Property<int?>("MaxHoleFired")
                        .HasColumnType("integer");

                    b.Property<double?>("MaxWeightFired")
                        .HasColumnType("double precision");

                    b.Property<string>("MetricScores")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PatternTemplateName")
                        .HasColumnType("text");

                    b.Property<string>("PatternType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phase")
                        .HasColumnType("text");

                    b.Property<string>("Pit")
                        .HasColumnType("text");

                    b.Property<double>("PowderFactor")
                        .HasColumnType("double precision");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<string>("Purpose")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("RockFactor")
                        .HasColumnType("double precision");

                    b.Property<double>("RockSG")
                        .HasColumnType("double precision");

                    b.Property<string>("Stage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("SubDrill")
                        .HasColumnType("double precision");

                    b.Property<double?>("TotalHoleLength")
                        .HasColumnType("double precision");

                    b.Property<double?>("TotalScore")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ValidationState")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double?>("Volume")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("ActualFragmentId");

                    b.HasIndex("DesignFragmentId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Patterns");
                });

            modelBuilder.Entity("BlastService.Private.Models.ProjectDb", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LocalTransformation")
                        .HasColumnType("jsonb");

                    b.Property<string>("Mapping")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UTCIdName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("UTCIsDaylightSavingTime")
                        .HasColumnType("boolean");

                    b.Property<int>("UTCOffsetHours")
                        .HasColumnType("integer");

                    b.Property<int>("UTCOffsetMinutes")
                        .HasColumnType("integer");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("BlastService.Private.Models.ChargeIntervalDb", b =>
                {
                    b.HasOne("BlastService.Private.Models.HoleDb", "Hole")
                        .WithMany("ChargeProfile")
                        .HasForeignKey("HoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BlastService.Private.Models.HoleDb", b =>
                {
                    b.HasOne("BlastService.Private.Models.FragmentationDb", "ActualFragmentation")
                        .WithMany()
                        .HasForeignKey("ActualFragmentId");

                    b.HasOne("BlastService.Private.Models.PatternDb", "BlastPattern")
                        .WithMany("BlastHoles")
                        .HasForeignKey("BlastPatternId");

                    b.HasOne("BlastService.Private.Models.PatternDb", "DrillPattern")
                        .WithMany("DrillHoles")
                        .HasForeignKey("DrillPatternId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BlastService.Private.Models.PatternDb", b =>
                {
                    b.HasOne("BlastService.Private.Models.FragmentationDb", "ActualFragmentation")
                        .WithMany()
                        .HasForeignKey("ActualFragmentId");

                    b.HasOne("BlastService.Private.Models.FragmentationDb", "DesignFragmentation")
                        .WithMany()
                        .HasForeignKey("DesignFragmentId");

                    b.HasOne("BlastService.Private.Models.ProjectDb", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
